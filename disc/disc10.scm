(define (factorial x)(if (= x 1) 1 (* x (factorial (- x 1)))))
(factorial 5)
(define (fib n)(cond ((= n 0)0)
                     ((= n 1)1)
                     (else(+ (fib (- n 1))(fib (- n 2 ))))
                     ))
(define (my-append a b)
    (if (null? (cdr a)) 
                (cons (car a) b)
            (cons (car a)(my-append (cdr a ) b))

))
(my-append '(1 2 3) '(2 3 4))
(define s '(5 4 (1 2) 3 7))
(car(cdr(cdr(cdr s))))
(define (duplicate lst) 
    (if (null? lst)nil
        (cons (car lst)(cons (car lst)(duplicate (cdr lst))))
    
))
(duplicate '(1 2 3 4))
(define (insert element lst index)
    (if (zero? index) 
        (cons element lst)
        (cons (car lst) (insert element (cdr lst) (- index 1)))
))
(insert 8 '(1 2 3 ) 1)